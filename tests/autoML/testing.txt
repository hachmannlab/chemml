
MLPRegressor
(-9.210340371976182, 'tanh', 0, 20, 160)
GradientBoostingRegressor
('absolute_error', 3232, 12, 70, -9.210340371976182)('absolute_error', 2916, 12, 30, -5.756462732485113)('squared_error', 681, 22, 20, -2.3025850929940455)('squared_error', 764, 12, 20, -5.004893518979748)('squared_error', 3043, 12, 70, -2.4593053293289904)('squared_error', 681, 12, 80, -2.963582810957676)
RandomForestRegressor
(334, 'absolute_error', 2, 51, -9.210340371976182)(334, 'poisson', 2, 71, -5.756462732485113)(349, 'friedman_mse', 22, 61, -2.3025850929940455)(95, 'squared_error', 32, 61, -6.767997780520238)(83, 'friedman_mse', 22, 1, -7.313613607110789)(349, 'absolute_error', 42, 61, -2.3025850929940455)(95, 'absolute_error', 32, 31, -9.010444984890215)(334, 'squared_error', 12, 41, -8.195389191663214)(182, 'squared_error', 12, 71, -5.756462732485113)
Performing GA on next model 

Ridge
(0.1, -9.210340371976182)(142.20000000000002, -5.756462732485113)(54.00000000000001, -2.3025850929940455)(161.8, -5.488598211811659)(78.5, -7.086061836685294)(29.500000000000004, -2.3025850929940455)(88.3, -3.8049896996282246)(78.5, -6.906816638785286)(191.20000000000002, -2.5941037546631023)
Performing GA on next model 

Lasso
(-9.210340371976182, 'auto')(-5.756462732485113, 'eigen')(-2.3025850929940455, 'svd')(-6.130616236792689, 'eigen')(-9.13750980349621, 'svd')(-2.926036319710124, 'auto')(-2.5444149601403128, 'auto')(-2.930053320108144, 'svd')(-2.926036319710124, 'svd')
Performing GA on next model 

SVR
('linear', 1.0)('linear', 50.5)('rbf', 100.0)('linear', 37.35190774139028)('rbf', 14.896979668294279)('poly', 100.0)('rbf', 13.33100483001326)('linear', 5.202111812318968)('rbf', 15.205901394525844)
Performing GA on next model 

ElasticNet
(-9.210340371976182, 0.5)(-5.756462732485113, 0.4)(-2.3025850929940455, 0.6)(-2.447994407600297, 0.4)(-6.091943851735543, 0.5)(-5.55949850952494, 0.4)(-7.738667394878442, 0.4)(-5.951712696706015, 0.4)(-2.800807716932453, 0.6)
Performing GA on next model 

DecisionTreeRegressor
('absolute_error', 'best', 22, 81, -9.210340371976182)('friedman_mse', 'best', 22, 41, -5.756462732485113)('friedman_mse', 'best', 22, 41, -2.3025850929940455)('poisson', 'best', 42, 21, -8.404227623232781)('squared_error', 'best', 22, 31, -5.836300781799548)('absolute_error', 'random', 42, 41, -2.3025850929940455)('poisson', 'best', 32, 41, -5.1166339236456)('absolute_error', 'best', 12, 41, -4.467143455008017)('friedman_mse', 'random', 22, 51, -8.780995632424666)
Performing GA on next model 

MLPRegressor
(-9.210340371976182, 'logistic', 200, 180, 20)
GradientBoostingRegressor
('absolute_error', 764, 42, 10, -9.210340371976182)('squared_error', 3232, 42, 70, -5.756462732485113)('huber', 1244, 32, 40, -2.3025850929940455)('huber', 2098, 32, 30, -7.444407676621819)('squared_error', 764, 42, 10, -7.145588531906101)('squared_error', 1051, 2, 70, -2.3025850929940455)
RandomForestRegressor
(182, 'squared_error', 12, 81, -9.210340371976182)(201, 'poisson', 42, 91, -5.756462732485113)(188, 'absolute_error', 12, 81, -2.3025850929940455)(144, 'poisson', 12, 11, -6.960551290849088)(83, 'squared_error', 12, 41, -6.397744063700352)(188, 'squared_error', 12, 51, -4.476499398964834)(188, 'poisson', 32, 61, -4.760641700004463)(188, 'absolute_error', 42, 51, -5.1244341766740895)(188, 'friedman_mse', 12, 91, -4.476499398964834)
Performing GA on next model 

Ridge
(14.8, -9.210340371976182)(19.700000000000003, -5.756462732485113)(127.5, -2.3025850929940455)(93.2, -6.337862962854089)(117.7, -6.721467399212788)(49.1, -3.680433137787799)(93.2, -5.721450194376342)(0.1, -6.161989591203183)(9.9, -6.337862962854089)
Performing GA on next model 

Lasso
(-9.210340371976182, 'auto')(-5.756462732485113, 'auto')(-2.3025850929940455, 'auto')(-6.251479293192867, 'auto')(-9.110526391201404, 'auto')(-5.756462732485113, 'svd')(-2.8148733139124227, 'svd')(-5.021538553455507, 'auto')(-3.1423896247911527, 'auto')
Performing GA on next model 

SVR
('linear', 1.0)('rbf', 50.5)('poly', 100.0)('poly', 36.90342047383402)('rbf', 62.96497185744769)('linear', 50.59380146453149)('poly', 66.3717006469657)('rbf', 60.919391302460554)('linear', 1.1169014436188587)
Performing GA on next model 

ElasticNet
(-9.210340371976182, 0.6)(-5.756462732485113, 0.6)(-2.3025850929940455, 0.6)(-6.178922266912968, 0.6)(-7.447081306729746, 0.6)(-5.284104264455102, 0.6)(-5.800416734257008, 0.5)(-5.471425726818522, 0.5)(-6.941435939775244, 0.6)
Performing GA on next model 

DecisionTreeRegressor
('poisson', 'random', 12, 51, -9.210340371976182)('poisson', 'random', 42, 41, -5.756462732485113)('squared_error', 'random', 2, 31, -2.3025850929940455)
MLPRegressor
(-9.210340371976182, 'relu', 120, 140, 200)
GradientBoostingRegressor
('quantile', 1244, 22, 20, -9.210340371976182)('quantile', 1221, 12, 10, -5.756462732485113)('squared_error', 681, 22, 80, -2.3025850929940455)('squared_error', 2916, 32, 20, -4.098579855074616)('squared_error', 1221, 12, 40, -9.0732104028074)('squared_error', 1244, 2, 80, -3.018809872944648)
RandomForestRegressor
(188, 'poisson', 42, 61, -9.210340371976182)(131, 'squared_error', 2, 71, -5.756462732485113)(201, 'squared_error', 32, 61, -2.3025850929940455)(201, 'squared_error', 12, 61, -2.7952334795556055)(104, 'squared_error', 32, 71, -8.613516374864957)(188, 'squared_error', 42, 61, -8.441961145768872)(144, 'poisson', 2, 91, -8.288456096143399)(188, 'absolute_error', 22, 81, -8.978093120348095)(144, 'absolute_error', 12, 31, -3.762455198148925)
Performing GA on next model 

Ridge
(83.4, -9.210340371976182)(83.4, -5.756462732485113)(107.9, -2.3025850929940455)(24.6, -5.800001785022957)(98.1, -8.725887942600908)(24.6, -9.210340371976182)(166.70000000000002, -6.1530437466956895)(83.4, -8.551100194511399)(83.4, -9.108716175105105)
Performing GA on next model 

Lasso
(-9.210340371976182, 'auto')(-5.756462732485113, 'auto')(-2.3025850929940455, 'auto')(-8.15616112406657, 'auto')(-5.391321482598778, 'eigen')(-6.545454309109313, 'svd')(-8.390436156091738, 'auto')(-8.319245361959268, 'eigen')(-8.15616112406657, 'svd')
Performing GA on next model 

SVR
('rbf', 1.0)('poly', 50.5)('rbf', 100.0)('poly', 60.13517030286845)('rbf', 67.49037814847193)('poly', 99.15655182448684)('rbf', 48.71248570110458)('poly', 68.31747610388196)('poly', 67.49037814847193)
Performing GA on next model 

ElasticNet
(-9.210340371976182, 0.6)(-5.756462732485113, 0.5)(-2.3025850929940455, 0.4)(-6.228175794997592, 0.5)(-6.0692203264049, 0.6)(-5.356941625722976, 0.5)(-8.473446577933828, 0.5)(-7.608335943497325, 0.5)(-9.030850361467188, 0.5)
Performing GA on next model 

DecisionTreeRegressor
('friedman_mse', 'random', 22, 1, -9.210340371976182)('absolute_error', 'best', 32, 61, -5.756462732485113)('squared_error', 'best', 42, 71, -2.3025850929940455)('squared_error', 'best', 32, 71, -3.2327132831779153)('squared_error', 'best', 32, 61, -7.072948427385001)('squared_error', 'best', 42, 1, -9.210340371976182)
MLPRegressor
(-9.210340371976182, 'tanh', 80, 120, 40)
GradientBoostingRegressor
('quantile', 2098, 12, 80, -9.210340371976182)('squared_error', 2098, 42, 50, -5.756462732485113)('squared_error', 681, 2, 80, -2.3025850929940455)('huber', 2916, 12, 30, -7.248505649090129)('quantile', 2098, 12, 30, -5.690309459299291)('absolute_error', 681, 32, 50, -3.392943330256748)('squared_error', 2916, 42, 10, -4.6174485411956585)('huber', 681, 2, 40, -6.767830044311673)('squared_error', 2916, 22, 70, -8.294580042527803)
Performing GA on next model 

RandomForestRegressor
(104, 'poisson', 32, 21, -9.210340371976182)(188, 'absolute_error', 2, 81, -5.756462732485113)(144, 'absolute_error', 32, 91, -2.3025850929940455)(83, 'absolute_error', 32, 41, -3.88171341454858)(104, 'poisson', 42, 81, -4.611470734939031)(349, 'friedman_mse', 32, 41, -4.46334551319511)(104, 'poisson', 22, 51, -4.100978525677347)(83, 'poisson', 2, 11, -3.669927043337509)(104, 'poisson', 2, 51, -8.836190940291585)
Performing GA on next model 

Ridge
(122.60000000000001, -9.210340371976182)(0.1, -5.756462732485113)(191.20000000000002, -2.3025850929940455)(127.5, -5.772594054515858)(78.5, -5.991572050417914)(107.9, -3.53664363538887)(161.8, -7.8965508845743795)(122.60000000000001, -6.258675265518375)(24.6, -5.5788897334993335)
Performing GA on next model 

Lasso
(-9.210340371976182, 'svd')(-5.756462732485113, 'eigen')(-2.3025850929940455, 'svd')(-4.052958303145233, 'eigen')(-5.710952954795287, 'eigen')(-6.174829194109306, 'eigen')(-7.212833088257436, 'svd')(-5.5347984887331, 'auto')(-5.073550731148641, 'svd')
Performing GA on next model 

SVR
('rbf', 1.0)('poly', 50.5)('linear', 100.0)('linear', 89.59863588709553)('poly', 49.43373886247768)('rbf', 1.0845985909307438)('poly', 85.44707927705792)('rbf', 93.19970809743155)('rbf', 100.0)
Performing GA on next model 

ElasticNet
(-9.210340371976182, 0.7)(-5.756462732485113, 0.4)(-2.3025850929940455, 0.6)(-7.441600323356544, 0.4)(-7.453425576289526, 0.7)(-3.334753644197894, 0.6)(-6.608310787364514, 0.5)(-6.19678239707866, 0.6)(-2.3025850929940455, 0.4)
Performing GA on next model 

DecisionTreeRegressor
('poisson', 'best', 12, 21, -9.210340371976182)('poisson', 'best', 2, 31, -5.756462732485113)('squared_error', 'best', 12, 41, -2.3025850929940455)
MLPRegressor
(-9.210340371976182, 'relu', 200, 20, 140)
GradientBoostingRegressor
('huber', 681, 42, 10, -9.210340371976182)('squared_error', 3043, 2, 60, -5.756462732485113)('squared_error', 1244, 22, 60, -2.3025850929940455)('huber', 3232, 42, 60, -8.749982294503402)('huber', 3232, 42, 60, -4.450521785562865)('squared_error', 764, 42, 90, -2.6297408187581377)('squared_error', 1244, 22, 70, -4.940904196342381)('huber', 1051, 42, 70, -3.080286512455908)('huber', 764, 2, 20, -3.299334951084634)
Performing GA on next model 

RandomForestRegressor
(131, 'poisson', 12, 1, -9.210340371976182)(182, 'absolute_error', 12, 81, -5.756462732485113)(334, 'friedman_mse', 22, 21, -2.3025850929940455)(144, 'absolute_error', 12, 71, -7.479266045748278)(83, 'friedman_mse', 12, 51, -6.444825099102334)(144, 'squared_error', 32, 71, -6.930212116286223)(144, 'friedman_mse', 12, 21, -8.42481311366197)(334, 'squared_error', 32, 71, -6.958705470645071)(83, 'absolute_error', 22, 71, -6.930212116286223)
Performing GA on next model 

Ridge
(181.4, -9.210340371976182)(14.8, -5.756462732485113)(107.9, -2.3025850929940455)(39.300000000000004, -4.809420915047461)(34.400000000000006, -8.249889245681373)(191.20000000000002, -9.01035263994259)(107.9, -3.022783383527903)(68.7, -4.6505992539263605)(191.20000000000002, -8.524758813750521)
Performing GA on next model 

Lasso
(-9.210340371976182, 'auto')(-5.756462732485113, 'svd')(-2.3025850929940455, 'auto')(-4.429442823926542, 'auto')(-5.127245543226061, 'svd')(-6.483816066458405, 'svd')(-5.3621255067632685, 'auto')(-5.72811751048928, 'eigen')(-5.756462732485113, 'eigen')
Performing GA on next model 

SVR
('linear', 1.0)('rbf', 50.5)('poly', 100.0)('poly', 7.233021990746305)('rbf', 10.70237652423318)('linear', 99.63987370838493)('rbf', 57.74258614326956)('rbf', 61.41525633582638)('linear', 9.099942047834922)
Performing GA on next model 

ElasticNet
(-9.210340371976182, 0.7)(-5.756462732485113, 0.7)(-2.3025850929940455, 0.4)(-7.392178550186204, 0.7)(-6.83656459631978, 0.7)(-6.328898380271117, 0.7)(-5.803148556669452, 0.7)(-3.4309038284963798, 0.4)(-7.475678185233172, 0.7)
Performing GA on next model 

DecisionTreeRegressor
('squared_error', 'best', 32, 61, -9.210340371976182)('friedman_mse', 'best', 2, 81, -5.756462732485113)('squared_error', 'random', 32, 41, -2.3025850929940455)