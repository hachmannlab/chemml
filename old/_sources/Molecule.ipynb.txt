{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Molecule\n",
    "\n",
    "The central class to construct a molecule from different chemical input formats. This module is built on top of RDKit and OpenBabel python API. We join the forces and strength of these two cheminformatic libraris for a consistent user experience. \n",
    "\n",
    "Almost all the molecular descriptors and molecule-based ML models require the chemical informatin as a Molecule object. Several methods are available in this module to facilitate the manipulation of chemical data.  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import module"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from chemml.chem import Molecule"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We play with caffeine molecule in this tutorial. Here are three representation formats of this molecule:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "caffeine_smiles = 'CN1C=NC2=C1C(=O)N(C(=O)N2C)C'\n",
    "caffeine_smarts = '[#6]-[#7]1:[#6]:[#7]:[#6]2:[#6]:1:[#6](=[#8]):[#7](:[#6](=[#8]):[#7]:2-[#6])-[#6]'\n",
    "caffeine_inchi = 'InChI=1S/C8H10N4O2/c1-10-4-9-6-5(10)7(13)12(3)8(14)11(6)2/h4H,1-3H3'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Construct a molecule\n",
    "\n",
    "You can construct a molecule by instantiating the Molecule class with two required parameters: \n",
    "- input: representaion string or file name\n",
    "- input_type: as of now only smiles, smarts, inchi, and xyz formats are available"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "mol = Molecule(caffeine_smiles, input_type='smiles')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can always see a representation of the available attributes and chemical formats. The `creator` shows you how this molecule was originally constructed. The rdkit and pybel molecule objects are also accessible if they have been used to create the molecule."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<chemml.chem.Molecule(\n",
       "        rdkit_molecule : <rdkit.Chem.rdchem.Mol object at 0x116ea8b20>,\n",
       "        pybel_molecule : None,\n",
       "        creator        : ('SMILES', 'CN1C=NC2=C1C(=O)N(C(=O)N2C)C'),\n",
       "        smiles         : 'Cn1c(=O)c2c(ncn2C)n(C)c1=O',\n",
       "        smarts         : None,\n",
       "        inchi          : None,\n",
       "        xyz            : None)>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cn1c(=O)c2c(ncn2C)n(C)c1=O ('SMILES', 'CN1C=NC2=C1C(=O)N(C(=O)N2C)C')\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<rdkit.Chem.rdchem.Mol at 0x116ea8b20>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(mol.smiles, mol.creator)\n",
    "mol.rdkit_molecule"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "construct a molecule using InChi representatoin:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<chemml.chem.Molecule(\n",
       "        rdkit_molecule : <rdkit.Chem.rdchem.Mol object at 0x116dcafa8>,\n",
       "        pybel_molecule : None,\n",
       "        creator        : ('InChi', 'InChI=1S/C8H10N4O2/c1-10-4-9-6-5(10)7(13)12(3)8(14)11(6)2/h4H,1-3H3'),\n",
       "        smiles         : None,\n",
       "        smarts         : None,\n",
       "        inchi          : 'InChI=1S/C8H10N4O2/c1-10-4-9-6-5(10)7(13)12(3)8(14)11(6)2/h4H,1-3H3',\n",
       "        xyz            : None)>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mol = Molecule(caffeine_inchi, 'inchi')\n",
    "mol"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualize"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The visualize method show or save a molecule image. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAASwAAAEsCAIAAAD2HxkiAAAIDUlEQVR4nO3d3ZKiyBqGUZyY+79l5oBp20KxEBPe/Fkr9sGebqNaLR6+FBRv8zxPQM4/6TsAoxMhhIkQwkQIYSKEMBFCmAghTIQQJkIIEyGEiRDCRAhhIoQwEUKYCCFMhBAmQggTIYSJEMJECGEihDARQpgIIUyEECZCCBMhhIkQwkQIYSKEMBFCmAghTIQQJkIIEyGEiRDCRAhhIoQwEUKYCCFMhBAmQggTIYSJEMJECGEihDARQpgIIUyEECZCCBMhhIkQwkQIYSKEMBFCmAghTIQQJkIIEyGEiRDCRAhhIoQwEUKYCCFMhBAmQggTIYSJEMJECGEihDARQpgIIUyEECZCCBMhhIkQwv5N3wF+ut3+/v95zt0PriPCmtxuP8Jb/SedshytxnNy8/xjMNIpEUKYCCFMhBAmQggTYTWeD8M4OjoGpyhqsupQgWMQYWWENx7LUQgTYTucuO+UCCFMhFV6OfS8i61TIiTgZm/yQIRV2hp6XQzD2+02Owj8QIQQJsJadTH0nhmDz0TYmpbjVOBLIuQiCtwiwoq1PPTYT4QNajBOY/ANEXI6Bb4nwrq1f8JQgb8SIYSJsHobQ6+JOXi7Tcbgr0TYqnmeK38Hpqtz7CTCBlSd2gYF7ifCBmwNvWqHoQI/IkIKU+CnRNiGaofeigIPEGHbWomTN0RIMcbgMSJsRuWHZxR4mAgpQIHfEGEPssNQgV8SYUsqWXmuKPBLIuyEt2i2y8dM2nP/cNDjVPR7bFfD38o0+AfVVg9/a5k68lPUira342E73P/AH+L8//ZDPmFVa3gSssdzq6uRqcm45ifJgMOw7EN+XsaufvbzGQjnJMpqfhIuR+3H6bD4g33+Yfcs73+lulP1cIqizrNnZ7hmdzPP///v8U/GeIIzeohwEEMN/KF0EmH3wzBeoGF4nk4inAboME6HJ+knwqnfDuNjkFN1FWGXqirQMDxDbxHO89zTVlJVgYvK7k4PqvsdF9HHea0KC+QMvU3CRQerJgWOo88IoSHdRtj0MGxiDLb79Nam2winZjtsokAK6jnCqcEOGyqwuee2Wp1HODW1rTRUIAX1H2ErWiywoR1czYaI0LZCzYaIcKq+wxbHIKWMEuFU8futmi6w8r1bEwaKsE5NF0gRIkxSIJMIg7op0Ir0SyKEMBFmdDMGF4bhN5q/7ugxl13Q1ldE8KtBI5y+qG57l//6u6xf/YQup8bt/nUXfGTcCJcV1FaHbzLZTnfvJtjlVcO7fFDXGDfC92xLXGboAzMOJ1CDoSOcch12eYnULh/UBUaPEOJEePowfHOWwtxgEuHCYRiCHFO+wtax+y6P6S8P6nHI9/cYy3KKIqnjc2uPD8rbht4T4RU6jm2PrQd+j3N+uOkVd6gy40bYx/dVVGj/HufFbVYzc4zf0LgRVmLwIbn2/Lb6N3/bi0EjvH4MjhNbyYe51WRfT+OgEXKSc3c0fbV35zzhdbbOzvd31v72R/qOtMEkpJj7GLwPw1WHpwzJx3+izVE5YoQVHhft4BXjy/u/+pPyTa5+lxX+ancYMcKgDmJ76dg5iaXJ+ectPvpX17d//0ntWomQbx3erfx+nvDhpgd+fiuGizC+o9wahr0Oyc/sudxId0/RcBFS1kU7ju7Ce+QUBcfdbt6EXYAIA/o4YRhf2L/4OHb+Ph0x1nK0zd9RjWp5JlcdVnGfPjZWhHSozfAejbYcrWWx1/SKtJYx2IvRIuRbCixuoAhrOwvXxNBbUeAZBoqwFdXGqcCTiBDCRJjU0OEZY/A8o0RY2wvCtijwVKNEuFLPnKlw6D1T4KkGjXDZ9Gve+puIkyIGjXCapnmeK9nQ36yTK99TUMQQr5TevyCs8+Xi47264kot5Hjv6N+FXyUb9/OdeX+llucb0BYRTtOfjbiGkbjnPjzf4E+Wg3+nQ6vym901ds667EgsuBf46Fotz2cgnJO40igRLnZu5ZFN8Jo5/PLDd8sftn/pwFaNtRzd+fLv/knRyzbEy1bCW/9Im9cK7MRYEU67X/4tf3lBilUdEyJiuAgX+0fidObarIZDQXeGYYqT9b+fCl+2zuLnzCu8VNnzlZO4wKCT8O7TkTgVWp2aOdyNHuH091Xi71UUWZ1efMjnU4bh9cZdjq7sX3N+WeA811vgovK715+KDgxU4szDMLZvXjAJ1848DFP4Z9IHEb6wrBgLdqhA3hDhpiIjcfkJLRbo8MxlHB1958vDoY3mx8VMwt8dG4mtF+hcxWVEuMuBV4lNF8iVRPiB0boyDK8hQggT4UHPI8LQ4BgRHjdCdVakFxDhcTZQihAhhInwKyMMwxEeY5YIv2Ub5Usi5Hd2NKcSYQG2Ub4hwjIGeDON3cxZfLKevaq6QGNPTEIIEyF7VfKdqv0RIYSJEMJEyAesSM8gQggTIYSJkM9YkRYnQggTIR8zDMsSIYSJkCO8ibQgEUKYCCFMhBAmQggTIYSJEMJECGEihDARQpgIIUyEECZCCBMhhIkQwkQIYSKEMBFCmAghTIQQJkIIEyGEiRDCRAhhIoQwEUKYCCFMhBAmQggTIYSJEMJECGEihDARQpgIIUyEECZCCBMhhIkQwkQIYSKEMBFCmAghTIQQJkIIEyGEiRDCRAhhIoQwEUKYCCFMhBAmQggTIYSJEMJECGEihDARQpgIIUyEECZCCBMhhIkQwkQIYSKEMBFCmAghTIQQJkIIEyGEiRDCRAhhIoQwEUKYCCFMhBAmQggTIYT9B9B4YCEw7q6TAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<PIL.Image.Image image mode=RGB size=300x300 at 0x116D99B38>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mol.visualize()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can add or remove hydrogens by:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<PIL.Image.Image image mode=RGB size=300x300 at 0x117A61FD0>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mol.hydrogens('add')\n",
    "mol.visualize()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For example, you need to add hydrogens if you want to optimize the geometry of this molecule to get the spatial informatin."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Convert chemical formats\n",
    "\n",
    "You can use `to_smiles`, `to_smarts`, `to_inchi`, or `to_xyz` methods with available parameters to convert the formats, accordingly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<chemml.chem.Molecule(\n",
       "        rdkit_molecule : <rdkit.Chem.rdchem.Mol object at 0x117a5eb70>,\n",
       "        pybel_molecule : None,\n",
       "        creator        : ('InChi', 'InChI=1S/C8H10N4O2/c1-10-4-9-6-5(10)7(13)12(3)8(14)11(6)2/h4H,1-3H3'),\n",
       "        smiles         : 'CN1C(=O)C2=C(N=CN2C)N(C)C1=O',\n",
       "        smarts         : '[#6H3]-[#7]1:[#6H]:[#7]:[#6]2:[#6]:1:[#6](:[#7](-[#6H3]):[#6](:[#7]:2-[#6H3])=[#8])=[#8]',\n",
       "        inchi          : 'InChI=1S/C8H10N4O2/c1-10-4-9-6-5(10)7(13)12(3)8(14)11(6)2/h4H,1-3H3',\n",
       "        xyz            : None)>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mol.hydrogens('remove') # just for the sake of visualization: to fit the text inside the box\n",
    "mol.to_smiles(kekuleSmiles=True) # although I already had it: just to make sure I have kekulized SMILES\n",
    "mol.to_smarts(isomericSmiles=False)\n",
    "mol.to_inchi()\n",
    "mol"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optimize XYZ geometry"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can optimize a molecule's structure using molecular simulation and force fields via `to_xyz` method. If the 3D info is not available you should specify a force field as an optimizer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# mol.to_xyz(optimizer=None)\n",
    "# at this point of the script, the above code raises the following error message: \n",
    "# ValueError: The conformation has not been built yet (maybe due to the 2D representation of the creator).\n",
    "# You should set the optimizer value if you wish to embed and optimize the 3D geometry."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<chemml.chem.Molecule(\n",
       "        rdkit_molecule : <rdkit.Chem.rdchem.Mol object at 0x117a71080>,\n",
       "        pybel_molecule : None,\n",
       "        creator        : ('InChi', 'InChI=1S/C8H10N4O2/c1-10-4-9-6-5(10)7(13)12(3)8(14)11(6)2/h4H,1-3H3'),\n",
       "        smiles         : 'CN1C(=O)C2=C(N=CN2C)N(C)C1=O',\n",
       "        smarts         : '[#6H3]-[#7]1:[#6H]:[#7]:[#6]2:[#6]:1:[#6](:[#7](-[#6H3]):[#6](:[#7]:2-[#6H3])=[#8])=[#8]',\n",
       "        inchi          : 'InChI=1S/C8H10N4O2/c1-10-4-9-6-5(10)7(13)12(3)8(14)11(6)2/h4H,1-3H3',\n",
       "        xyz            : <XYZ(geometry: (24, 3), atomic_numbers: (24, 1), atomic_symbols: (24, 1))>)>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mol.hydrogens('add')\n",
    "mol.to_xyz(optimizer='MMFF', mmffVariant='MMFF94s', maxIters=300) # 'UFF'\n",
    "mol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-2.44903932, -2.19199362,  0.55222615],\n",
       "       [ 0.37513395,  2.83347839, -1.16626692],\n",
       "       [ 2.94987062, -0.82638032,  0.83612442],\n",
       "       [-2.69467148,  0.08256869, -0.47262288],\n",
       "       [-0.65402173, -0.49616211,  0.10884004],\n",
       "       [-0.68501975,  0.75131589, -0.43642431],\n",
       "       [ 0.53907792, -1.11512806,  0.57032083],\n",
       "       [ 1.67617468,  0.98827693, -0.15624189],\n",
       "       [-1.94590423,  1.11734979, -0.79935782],\n",
       "       [-1.95038557, -0.92390572,  0.08390961],\n",
       "       [ 0.45254311,  1.50808139, -0.57973034],\n",
       "       [ 1.6674422 , -0.30689908,  0.40324067],\n",
       "       [ 0.55615897, -2.24033207,  1.06037388],\n",
       "       [ 2.72802032,  1.62625986, -0.26200369],\n",
       "       [-3.53002408, -2.23845001,  0.39708294],\n",
       "       [-1.96118905, -2.98874858, -0.01472587],\n",
       "       [-2.22594924, -2.28155429,  1.61827497],\n",
       "       [-0.02629914,  2.75208883, -2.18137956],\n",
       "       [-0.2894747 ,  3.45514567, -0.55794801],\n",
       "       [ 1.35494907,  3.3155    , -1.21617727],\n",
       "       [ 3.63135754, -0.84958299, -0.02069721],\n",
       "       [ 3.37027656, -0.15218684,  1.58966733],\n",
       "       [ 2.87672511, -1.83109484,  1.2593756 ],\n",
       "       [-3.76575174,  0.01235309, -0.61586065]])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mol.xyz.geometry"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read XYZ file\n",
    "\n",
    "We utilize Pybel file parsers to build a molecule from chemical input files and convert them to other formats. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<chemml.chem.Molecule(\n",
       "        rdkit_molecule : None,\n",
       "        pybel_molecule : <pybel.Molecule object at 0x117a73f60>,\n",
       "        creator        : ('XYZ', 'images/1_opt.xyz'),\n",
       "        smiles         : None,\n",
       "        smarts         : None,\n",
       "        inchi          : None,\n",
       "        xyz            : <XYZ(geometry: (28, 3), atomic_numbers: (28, 1), atomic_symbols: (28, 1))>)>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mol = Molecule('images/1_opt.xyz', 'xyz')\n",
    "mol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" font-family=\"sans-serif\" height=\"100\" stroke=\"rgb(0,0,0)\" stroke-linecap=\"round\" stroke-width=\"2\" viewBox=\"0 0 365.867 248.82\" width=\"100\" x=\"0\" y=\"0\">\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"162.7\" x2=\"140.5\" y1=\"85.2\" y2=\"98.0\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"107.0\" x2=\"107.0\" y1=\"53.0\" y2=\"78.7\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"194.6\" x2=\"207.4\" y1=\"197.6\" y2=\"175.3\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"220.3\" x2=\"207.4\" y1=\"197.6\" y2=\"175.3\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"207.4\" x2=\"140.5\" y1=\"175.3\" y2=\"136.7\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"207.4\" x2=\"240.9\" y1=\"175.3\" y2=\"156.0\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"200.8\" x2=\"225.2\" y1=\"128.6\" y2=\"120.7\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"73.5\" x2=\"51.3\" y1=\"98.0\" y2=\"85.2\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"303.8\" x2=\"279.4\" y1=\"159.9\" y2=\"152.0\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"107.0\" x2=\"107.0\" y1=\"156.0\" y2=\"181.7\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"73.5\" x2=\"51.3\" y1=\"136.7\" y2=\"149.5\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"225.2\" x2=\"206.1\" y1=\"120.7\" y2=\"103.5\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"240.9\" x2=\"240.9\" y1=\"156.0\" y2=\"181.7\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"279.4\" x2=\"284.7\" y1=\"152.0\" y2=\"177.1\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"264.4\" x2=\"253.9\" y1=\"71.4\" y2=\"94.8\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"302.5\" x2=\"287.4\" y1=\"93.4\" y2=\"114.1\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"253.9\" x2=\"238.8\" y1=\"94.8\" y2=\"74.0\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"287.4\" x2=\"312.9\" y1=\"114.1\" y2=\"116.8\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"73.5\" x2=\"73.5\" y1=\"136.7\" y2=\"98.0\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"80.7\" x2=\"80.7\" y1=\"130.7\" y2=\"104.0\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"73.5\" x2=\"107.0\" y1=\"98.0\" y2=\"78.7\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"107.0\" x2=\"140.5\" y1=\"78.7\" y2=\"98.0\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"108.6\" x2=\"131.7\" y1=\"87.9\" y2=\"101.2\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"140.5\" x2=\"140.5\" y1=\"98.0\" y2=\"136.7\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"140.5\" x2=\"107.0\" y1=\"136.7\" y2=\"156.0\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"131.7\" x2=\"108.6\" y1=\"133.4\" y2=\"146.8\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"107.0\" x2=\"73.5\" y1=\"156.0\" y2=\"136.7\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"279.4\" x2=\"240.9\" y1=\"152.0\" y2=\"156.0\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"240.9\" x2=\"225.2\" y1=\"156.0\" y2=\"120.7\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"225.2\" x2=\"253.9\" y1=\"120.7\" y2=\"94.8\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"253.9\" x2=\"287.4\" y1=\"94.8\" y2=\"114.1\" />\n",
       "<line stroke=\"rgb(0,0,0)\" stroke-width=\"2.0\" x1=\"287.4\" x2=\"279.4\" y1=\"114.1\" y2=\"152.0\" />\n",
       "<text fill=\"rgb(191,191,191)\" font-size=\"16\" stroke=\"rgb(191,191,191)\" stroke-width=\"1\" x=\"263.652827\" y=\"67.479434\">H</text>\n",
       "<text fill=\"rgb(191,191,191)\" font-size=\"16\" stroke=\"rgb(191,191,191)\" stroke-width=\"1\" x=\"225.197980\" y=\"71.521202\">H</text>\n",
       "<text fill=\"rgb(191,191,191)\" font-size=\"16\" stroke=\"rgb(191,191,191)\" stroke-width=\"1\" x=\"319.866839\" y=\"126.178293\">H</text>\n",
       "<text fill=\"rgb(191,191,191)\" font-size=\"16\" stroke=\"rgb(191,191,191)\" stroke-width=\"1\" x=\"304.139689\" y=\"90.854535\">H</text>\n",
       "<text fill=\"rgb(191,191,191)\" font-size=\"16\" stroke=\"rgb(191,191,191)\" stroke-width=\"1\" x=\"281.411992\" y=\"197.779940\">H</text>\n",
       "<text fill=\"rgb(191,191,191)\" font-size=\"16\" stroke=\"rgb(191,191,191)\" stroke-width=\"1\" x=\"310.146926\" y=\"171.906890\">H</text>\n",
       "<text fill=\"rgb(191,191,191)\" font-size=\"16\" stroke=\"rgb(191,191,191)\" stroke-width=\"1\" x=\"234.917894\" y=\"202.666667\">H</text>\n",
       "<text fill=\"rgb(191,191,191)\" font-size=\"16\" stroke=\"rgb(191,191,191)\" stroke-width=\"1\" x=\"190.455810\" y=\"102.803192\">H</text>\n",
       "<text fill=\"rgb(191,191,191)\" font-size=\"16\" stroke=\"rgb(191,191,191)\" stroke-width=\"1\" x=\"182.416558\" y=\"140.624899\">H</text>\n",
       "<text fill=\"rgb(191,191,191)\" font-size=\"16\" stroke=\"rgb(191,191,191)\" stroke-width=\"1\" x=\"182.098245\" y=\"216.819649\">H</text>\n",
       "<text fill=\"rgb(191,191,191)\" font-size=\"16\" stroke=\"rgb(191,191,191)\" stroke-width=\"1\" x=\"220.764911\" y=\"216.819649\">H</text>\n",
       "<text fill=\"rgb(191,191,191)\" font-size=\"16\" stroke=\"rgb(191,191,191)\" stroke-width=\"1\" x=\"100.972631\" y=\"202.666667\">H</text>\n",
       "<text fill=\"rgb(191,191,191)\" font-size=\"16\" stroke=\"rgb(191,191,191)\" stroke-width=\"1\" x=\"34.000000\" y=\"164.000000\">H</text>\n",
       "<text fill=\"rgb(191,191,191)\" font-size=\"16\" stroke=\"rgb(191,191,191)\" stroke-width=\"1\" x=\"34.000000\" y=\"86.666667\">H</text>\n",
       "<text fill=\"rgb(191,191,191)\" font-size=\"16\" stroke=\"rgb(191,191,191)\" stroke-width=\"1\" x=\"100.972631\" y=\"48.000000\">H</text>\n",
       "<text fill=\"rgb(191,191,191)\" font-size=\"16\" stroke=\"rgb(191,191,191)\" stroke-width=\"1\" x=\"167.945262\" y=\"86.666667\">H</text>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<pybel.Molecule at 0x117a73f60>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mol.visualize()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can create 2D chemical representations using previous methods. Note that the rdkit molecule will be created for this conversion becuase it is our priority to manipulate 2D chemical info."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<chemml.chem.Molecule(\n",
       "        rdkit_molecule : <rdkit.Chem.rdchem.Mol object at 0x117a71350>,\n",
       "        pybel_molecule : <pybel.Molecule object at 0x117a73f60>,\n",
       "        creator        : ('XYZ', 'images/1_opt.xyz'),\n",
       "        smiles         : 'c1ccc(CC2CCCC2)cc1',\n",
       "        smarts         : '[#6]1-[#6]-[#6]-[#6](-[#6]-1)-[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1',\n",
       "        inchi          : 'InChI=1S/C12H16/c1-2-6-11(7-3-1)10-12-8-4-5-9-12/h1-3,6-7,12H,4-5,8-10H2',\n",
       "        xyz            : <XYZ(geometry: (28, 3), atomic_numbers: (28, 1), atomic_symbols: (28, 1))>)>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mol.to_smiles(canonical=True)\n",
    "mol.to_smarts()\n",
    "mol.to_inchi()\n",
    "mol"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:chemml_dev]",
   "language": "python",
   "name": "conda-env-chemml_dev-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
