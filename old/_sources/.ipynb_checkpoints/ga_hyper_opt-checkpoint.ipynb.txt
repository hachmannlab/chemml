{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Hyperparameter Optimization\n",
    "\n",
    "## Import Data Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(500, 1) (500, 200)\n"
     ]
    }
   ],
   "source": [
    "from chemml.datasets import load_organic_density\n",
    "_,density,features = load_organic_density()\n",
    "\n",
    "print(density.shape, features.shape)\n",
    "density, features = density.values, features.values\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "scalerx = StandardScaler()\n",
    "features = scalerx.fit_transform(features)\n",
    "density = scalerx.fit_transform(density)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Defining hyperparameter space\n",
    "Lets consider kernel ridge regression from sciit-learn to model this data set. The hyperparameters of interest are: alpha, kernel and degree.\n",
    "\n",
    "The space variable is a tuple of dictionaries for each hyperparameter. The dictionary is specified as: \n",
    "\n",
    "    {'name' : {'type' : <range>}}\n",
    "\n",
    "An additional mutation key, with its value as: (mean, standard deviation) of a Gaussian distribution, is also required for the 'uniform' hyperparameter type. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.kernel_ridge import KernelRidge\n",
    "space = (\n",
    "        {'alpha'   :   {'uniform' : (0.1, 10), 'mutation': (0,1)}},\n",
    "        {'kernels' :   {'choice'  : ['rbf', 'sigmoid', 'polynomial', 'linear']}},\n",
    "        {'degree'  :   {'int'     : (1,5)}} )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Defining objective function\n",
    "The  objective  function  is  defined as a function that receives one 'individual' of the genetic  algorithm's  population  that  is  an  ordered  list  of the hyperparameters  defined  in  the space variable.   Within the objective function, the user does all the required calculations and returns the metric (as a tuple) that is supposed to be optimized. If multiple metrics are returned, all the metrics are optimized according to the fitness defined in the initialization of the Genetic Algorithm class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_absolute_error\n",
    "def obj(individual):\n",
    "    krr = KernelRidge(alpha=individual[0], kernel=individual[1], degree=individual[2])\n",
    "    krr.fit(features[:400], density[:400])\n",
    "    pred = krr.predict(features[400:])\n",
    "    return mean_absolute_error(density[400:], pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optimize the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from chemml.optimization import GeneticAlgorithm\n",
    "ga = GeneticAlgorithm(evaluate=obj, space=space, fitness=(\"min\", ), \n",
    "                        pop_size = 8, crossover_size=0.5, mutation_size=0.5, algorithm=3)\n",
    "best_models_per_generation, final_best_hyperparameters = ga.search(n_generations=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'alpha': 0.45080358953866617, 'kernels': 'linear', 'degree': 2}\n"
     ]
    }
   ],
   "source": [
    "print(final_best_hyperparameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Best_individual</th>\n",
       "      <th>Fitness_values</th>\n",
       "      <th>Time (hours)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(5.757142857142857, linear, 3)</td>\n",
       "      <td>0.107350</td>\n",
       "      <td>0.000029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>(2.396946883010817, linear, 3)</td>\n",
       "      <td>0.101111</td>\n",
       "      <td>0.000036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>(2.396946883010817, linear, 3)</td>\n",
       "      <td>0.101111</td>\n",
       "      <td>0.000028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>(2.396946883010817, linear, 3)</td>\n",
       "      <td>0.101111</td>\n",
       "      <td>0.000028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>(2.396946883010817, linear, 3)</td>\n",
       "      <td>0.101111</td>\n",
       "      <td>0.000034</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>(0.45080358953866617, linear, 2)</td>\n",
       "      <td>0.091844</td>\n",
       "      <td>0.000041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>(0.45080358953866617, linear, 2)</td>\n",
       "      <td>0.091844</td>\n",
       "      <td>0.000044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>(0.45080358953866617, linear, 2)</td>\n",
       "      <td>0.091844</td>\n",
       "      <td>0.000029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>(0.45080358953866617, linear, 2)</td>\n",
       "      <td>0.091844</td>\n",
       "      <td>0.000029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>(0.45080358953866617, linear, 2)</td>\n",
       "      <td>0.091844</td>\n",
       "      <td>0.000042</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Best_individual  Fitness_values  Time (hours)\n",
       "0    (5.757142857142857, linear, 3)        0.107350      0.000029\n",
       "1    (2.396946883010817, linear, 3)        0.101111      0.000036\n",
       "2    (2.396946883010817, linear, 3)        0.101111      0.000028\n",
       "3    (2.396946883010817, linear, 3)        0.101111      0.000028\n",
       "4    (2.396946883010817, linear, 3)        0.101111      0.000034\n",
       "5  (0.45080358953866617, linear, 2)        0.091844      0.000041\n",
       "6  (0.45080358953866617, linear, 2)        0.091844      0.000044\n",
       "7  (0.45080358953866617, linear, 2)        0.091844      0.000029\n",
       "8  (0.45080358953866617, linear, 2)        0.091844      0.000029\n",
       "9  (0.45080358953866617, linear, 2)        0.091844      0.000042"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_models_per_generation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Resume optimization\n",
    "The Genetic Algorithm can resume the search for the best hyperparameters combination from the last checkpoint. This feature can be especially useful when the objective function is computationally expensive."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "best_models_per_generation, final_best_hyperparameters = ga.search(n_generations=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Best_individual</th>\n",
       "      <th>Fitness_values</th>\n",
       "      <th>Time (hours)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(0.45080358953866617, linear, 2)</td>\n",
       "      <td>0.091844</td>\n",
       "      <td>0.000058</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>(0.45080358953866617, linear, 2)</td>\n",
       "      <td>0.091844</td>\n",
       "      <td>0.000043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>(0.45080358953866617, linear, 2)</td>\n",
       "      <td>0.091844</td>\n",
       "      <td>0.000036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>(0.45080358953866617, linear, 2)</td>\n",
       "      <td>0.091844</td>\n",
       "      <td>0.000029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>(0.45080358953866617, linear, 2)</td>\n",
       "      <td>0.091844</td>\n",
       "      <td>0.000035</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Best_individual  Fitness_values  Time (hours)\n",
       "0  (0.45080358953866617, linear, 2)        0.091844      0.000058\n",
       "1  (0.45080358953866617, linear, 2)        0.091844      0.000043\n",
       "2  (0.45080358953866617, linear, 2)        0.091844      0.000036\n",
       "3  (0.45080358953866617, linear, 2)        0.091844      0.000029\n",
       "4  (0.45080358953866617, linear, 2)        0.091844      0.000035"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_models_per_generation"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:chemml_dev]",
   "language": "python",
   "name": "conda-env-chemml_dev-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
